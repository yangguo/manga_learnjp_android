name: Build Signed Android APK

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version_name:
        description: 'Version name for the APK'
        required: true
        default: '1.0.0'

jobs:
  build-signed:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Decode Keystore
      if: env.KEYSTORE_BASE64 != ''
      env:
        KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
      run: |
        echo $KEYSTORE_BASE64 | base64 -d > app/keystore.jks
        
    - name: Build signed release APK
      if: env.KEYSTORE_BASE64 != ''
      env:
        KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
        KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
        KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
        KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
      run: |
        ./gradlew assembleRelease \
          -Pandroid.injected.signing.store.file=keystore.jks \
          -Pandroid.injected.signing.store.password=$KEYSTORE_PASSWORD \
          -Pandroid.injected.signing.key.alias=$KEY_ALIAS \
          -Pandroid.injected.signing.key.password=$KEY_PASSWORD
          
    - name: Build unsigned release APK (fallback)
      if: env.KEYSTORE_BASE64 == ''
      env:
        KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
      run: ./gradlew assembleRelease
      
    - name: Get APK path
      id: apk-path
      run: |
        APK_PATH=$(find app/build/outputs/apk/release -name "*.apk" | head -1)
        echo "path=$APK_PATH" >> $GITHUB_OUTPUT
        echo "name=$(basename $APK_PATH)" >> $GITHUB_OUTPUT
        
    - name: Upload signed APK
      uses: actions/upload-artifact@v4
      with:
        name: signed-release-apk
        path: ${{ steps.apk-path.outputs.path }}
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        name: Release ${{ github.ref_name }}
        files: ${{ steps.apk-path.outputs.path }}
        generate_release_notes: true
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}